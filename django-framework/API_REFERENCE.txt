╔════════════════════════════════════════════════════════════════════════╗
║                    GRAPH DATABASE API - QUICK REFERENCE                ║
╚════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────┐
│  🚀 QUICK START                                                         │
└─────────────────────────────────────────────────────────────────────────┘

  1. pip install -r requirements.txt
  2. python manage.py migrate
  3. python manage.py runserver
  4. Open: http://127.0.0.1:8000/swagger/

┌─────────────────────────────────────────────────────────────────────────┐
│  🌐 IMPORTANT URLS                                                      │
└─────────────────────────────────────────────────────────────────────────┘

  Swagger UI:  http://127.0.0.1:8000/swagger/
  ReDoc:       http://127.0.0.1:8000/redoc/
  API Base:    http://127.0.0.1:8000/api/

┌─────────────────────────────────────────────────────────────────────────┐
│  📡 API ENDPOINTS                                                       │
└─────────────────────────────────────────────────────────────────────────┘

  ┌───────────────────────────────────────────────────────────────────────┐
  │ GET /api/nodes/?by={field}&value={value}                              │
  │ Query nodes by various criteria                                       │
  └───────────────────────────────────────────────────────────────────────┘
  
  Supported fields:
    • node_id   - Unique identifier
    • name      - Node name
    • label     - Node label/type
    • type      - Node type (alias for label)
    • email     - Email address
    • age       - Age value
    • city      - City name
    • status    - Status (active/inactive)

  Examples:
    GET /api/nodes/?by=node_id&value=n001
    GET /api/nodes/?by=name&value=Alice%20Johnson
    GET /api/nodes/?by=label&value=Person
    GET /api/nodes/?by=city&value=Chicago
    GET /api/nodes/?by=status&value=active

  ┌───────────────────────────────────────────────────────────────────────┐
  │ GET /api/nodes/all/                                                    │
  │ Get all nodes in the database                                          │
  └───────────────────────────────────────────────────────────────────────┘

  ┌───────────────────────────────────────────────────────────────────────┐
  │ GET /api/nodes/{node_id}/                                              │
  │ Get a specific node by its unique ID                                   │
  └───────────────────────────────────────────────────────────────────────┘
  
  Example:
    GET /api/nodes/n001/

┌─────────────────────────────────────────────────────────────────────────┐
│  📊 SAMPLE DATA (6 nodes included)                                      │
└─────────────────────────────────────────────────────────────────────────┘

  n001  Alice Johnson    Person, User         New York        active
  n002  Bob Smith        Person, User         San Francisco   active
  n003  Charlie Brown    Person, Admin        Chicago         active
  n004  Diana Prince     Person, User         Boston          inactive
  n005  TechCorp Inc     Organization, Co.    Seattle         active
  n006  Alice Cooper     Person, User         Los Angeles     active

┌─────────────────────────────────────────────────────────────────────────┐
│  📝 RESPONSE FORMAT                                                     │
└─────────────────────────────────────────────────────────────────────────┘

  {
    "count": 1,
    "query_params": {
      "by": "name",
      "value": "Alice Johnson"
    },
    "nodes": [
      {
        "node_id": "n001",
        "labels": ["Person", "User"],
        "properties": {
          "name": "Alice Johnson",
          "email": "alice@example.com",
          "age": 28,
          "city": "New York",
          "status": "active"
        },
        "created_at": "2023-01-15T10:30:00Z",
        "updated_at": "2024-10-20T14:22:00Z",
        "relationship_count": 5,
        "degree": {
          "incoming": 3,
          "outgoing": 2,
          "total": 5
        }
      }
    ]
  }

┌─────────────────────────────────────────────────────────────────────────┐
│  🔧 TESTING WITH cURL                                                   │
└─────────────────────────────────────────────────────────────────────────┘

  # Get node by ID
  curl "http://127.0.0.1:8000/api/nodes/?by=node_id&value=n001"

  # Get nodes by city
  curl "http://127.0.0.1:8000/api/nodes/?by=city&value=Chicago"

  # Get all nodes
  curl "http://127.0.0.1:8000/api/nodes/all/"

  # Get specific node
  curl "http://127.0.0.1:8000/api/nodes/n001/"

┌─────────────────────────────────────────────────────────────────────────┐
│  🐍 TESTING WITH PYTHON                                                 │
└─────────────────────────────────────────────────────────────────────────┘

  import requests

  # Get nodes by name
  r = requests.get("http://127.0.0.1:8000/api/nodes/",
                   params={"by": "name", "value": "Alice Johnson"})
  print(r.json())

  # Get all nodes
  r = requests.get("http://127.0.0.1:8000/api/nodes/all/")
  print(r.json())

  # Test the API
  python test_api.py

┌─────────────────────────────────────────────────────────────────────────┐
│  📞 HTTP STATUS CODES                                                   │
└─────────────────────────────────────────────────────────────────────────┘

  200 OK                   - Request successful
  400 Bad Request          - Invalid parameters
  404 Not Found            - No nodes found
  500 Internal Server Error - Server error

┌─────────────────────────────────────────────────────────────────────────┐
│  📁 PROJECT STRUCTURE                                                   │
└─────────────────────────────────────────────────────────────────────────┘

  graph_api/
  ├── manage.py              Django management
  ├── requirements.txt       Dependencies
  ├── start.sh              Quick start script
  ├── test_api.py           API test suite
  ├── graph_api/            Django project
  │   ├── settings.py       Configuration
  │   └── urls.py           URL routing + Swagger
  └── graph_nodes/          Graph nodes app
      ├── serializers.py    Data validation
      ├── services.py       Business logic + data
      ├── views.py          API endpoints
      └── urls.py           App routing

┌─────────────────────────────────────────────────────────────────────────┐
│  📚 DOCUMENTATION FILES                                                 │
└─────────────────────────────────────────────────────────────────────────┘

  START_HERE.md         ← Start here for orientation
  QUICK_REFERENCE.md    ← Quick commands and examples
  README.md             ← Complete documentation
  EXAMPLES.md           ← Detailed API examples
  ARCHITECTURE.md       ← System architecture
  PROJECT_SUMMARY.md    ← Project overview
  API_REFERENCE.txt     ← This file

┌─────────────────────────────────────────────────────────────────────────┐
│  🎯 COMMON COMMANDS                                                     │
└─────────────────────────────────────────────────────────────────────────┘

  # Start server
  python manage.py runserver

  # Start server on different port
  python manage.py runserver 8001

  # Run tests
  python test_api.py

  # Install dependencies
  pip install -r requirements.txt

  # Run migrations
  python manage.py migrate

┌─────────────────────────────────────────────────────────────────────────┐
│  💡 TIPS                                                                │
└─────────────────────────────────────────────────────────────────────────┘

  • Use Swagger UI for interactive testing
  • URL encode spaces (%20) in query parameters
  • String comparisons are case-insensitive
  • Check response status codes for debugging
  • Multiple nodes can match label/city/status queries

┌─────────────────────────────────────────────────────────────────────────┐
│  🔌 CONNECTING REAL DATABASE                                            │
└─────────────────────────────────────────────────────────────────────────┘

  1. Install database driver (e.g., pip install neo4j)
  2. Update services.py with real database connection
  3. Replace dummy data methods with actual queries
  4. See README.md for detailed instructions

╔════════════════════════════════════════════════════════════════════════╗
║  For more details, see START_HERE.md or README.md                      ║
╚════════════════════════════════════════════════════════════════════════╝
